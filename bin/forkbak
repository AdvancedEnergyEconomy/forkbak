#!/usr/bin/env ruby

require 'rest_client'
require 'platform-api'
require 'pg'

$stdout.sync = true

module Forkbak
  def self.heroku
    PlatformAPI.connect(ENV.fetch("HEROKU_API_KEY"))
  end

  def self.create_database
    database_to_fork = heroku.config_var.info(ENV.fetch('FORK_FROM_APP'))['DATABASE_URL']
    response = heroku.addon.create(ENV['APP'], {
      plan: "heroku-postgresql:standard-5",
      config: {
        fork: database_to_fork,
        fast: true
      }
    })
  end

  def self.database_url(config_var)
    heroku.config_var.info(ENV.fetch('APP'))[config_var]
  end

  def self.wait_for_database(config_var)
    loop do
      begin
        resolved_database_url = self.database_url(config_var)

        url = URI.parse(resolved_database_url)
        host = url.host
        host = host.gsub(/%2F/i, '/') if host

        params = [
          host,
          url.port || 5432,
          nil, '',
          url.path.gsub("/",""),
          url.user,
          url.password
        ]
        conn = PG::Connection.open(*params)
        result = conn.exec("SELECT pg_is_in_recovery()").values
        break if result[0][0] == 'f'
        puts "still waiting, pg is in recovery"
      rescue PG::ConnectionBad => e
        if e.message =~ /Is the server running on host|the database system is starting up|could not connect to server/
          puts "DB preparing"
        elsif e.message =~ /password authentication failed for user/
          puts "Unable to connect - bad creds? Retrying"
        elsif e.message =~ /could not translate host name/
          puts "Unable to connect, DNS issues. Retrying"
        else
          raise
        end
      rescue =>e
        puts "still waiting: #{e.class}: #{e.message}"
      ensure
        conn.close if conn
      end
      sleep(10)
    end
  end

  def self.create_backup(db)
    pgbackups = Forkbak::PGBackupsClient.new(db)
    loop do
      if transfer_id = pgbackups.transfer!
        return transfer_id
      else
        sleep 10
        puts "Could not initiate transfer, retrying"
      end
    end
  end

  def self.wait_for_backup(config_var, transfer_id)
    puts "waiting for backup to finish (#{transfer_id})"
    database_url = self.database_url(config_var)
    pgbackups = Forkbak::PGBackupsClient.new(from_url: database_url, transfer_id: transfer_id)
    until pgbackups.transfer_status == Forkbak::PGBackupsClient::StatusCompleted
      putc '.'
      sleep 10
    end
    puts "Backup complete"
  end

  def self.destroy_databases
    heroku.config_var.info(ENV.fetch('APP')).select { |k, v| v =~ /^postgres/ }.each do |k, v|
      heroku.addon.destroy(ENV.fetch('APP'), k
    end
  end
end

module Forkbak
  class PGBackupsClient
    def initialize(opts)
      @db          = opts.fetch(:db)
      @transfer_id = opts[:transfer_id]
    end

    def transfer!
      result = JSON.parse(
        restclient_resource["/client/v11/databases/#{db.name}/backups"].post(
          from_url:  @from_url,
          from_name: "AUTO_FORK",
          to_url:    nil,
          to_name:   "BACKUP",
          expire:    true
        )
      )
      puts "Result from backup request: #{result}"
      @transfer_id = result['id']
    rescue => e
      nil
    end

    def transfer_status
      response = JSON.parse(
        restclient_resource["/client/v11/databases/#{db.name}/transfers/#{@transfer_id}"].get
      )
      puts "Response from transfer status: #{response}"
      if response['errors']
        StatusError
      elsif response['finished_at']
        StatusCompleted
      end
    rescue => e
      StatusUnknown
    end

    StatusCompleted = Class.new
    StatusError     = Class.new
    StatusUnknown   = Class.new

  private
    def restclient_resource
      @restclient_resource ||= RestClient::Resource.new(
          "https://shogun.heroku.com/",
          :password => ENV['HEROKU_API_KEY']
      )
    end
  end
end

def run
  start = Time.now
  puts "Cleaning up leftover DBs"
  Forkbak.destroy_databases
  puts "Creating database"
  db = Forkbak.create_database
  begin
    puts "Waiting for database to be available: #{config_var}"
    Forkbak.wait_for_database(db['config_vars'].first)
    puts "Creating backup"
    transfer_id = Forkbak.create_backup(db['name'])
    puts "Waiting for backup to complete (#{transfer_id})"
    Forkbak.wait_for_backup(config_var, transfer_id)
  rescue => e
    puts "Failed to take backup: #{e.class} - #{e.message}"
  ensure
    puts "Done, took #{Time.now - start}"
    Forkbak.destroy_databases
  end
end

run
